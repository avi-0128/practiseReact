{"ast":null,"code":"var _jsxFileName = \"/Users/avinashmamidi/Downloads/Movie-Night-Extravaganza-master/app/src/screens/MyContent/index.js\";\nimport React, { useState } from 'react';\nimport '../Movies/style.css';\nimport { fetchMyContentList } from '../../utilites/myContentHelper';\nimport MovieCell from '../../components/MovieCell';\nimport { isMovieObjectExistInLocalStorage, removeMovieToMyContent } from '../../utilites/myContentHelper';\n\nfunction MyContent() {\n  const apiData = fetchMyContentList();\n  const [updateNow, setUpdateNow] = useState(true);\n  /**\n  * This method is to refresh the list of MyContent Page when Movie is removed.\n  */\n\n  const refreshList = () => {\n    setUpdateNow(!updateNow);\n  };\n  /**\n  * This callBack Fuction Handles the Add / Remove content ButtonAction\n  */\n\n\n  const onClickMovieCell = movieObj => {\n    if (isMovieObjectExistInLocalStorage(movieObj) === true) {\n      removeMovieToMyContent(movieObj);\n    }\n  };\n  /**\n   * This method generates the Button Name dynamically on basis of condition.\n   */\n\n\n  const getCellButtonName = () => {\n    return \"Remove From My Content\";\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movieContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, apiData && apiData.map((e, index) => /*#__PURE__*/React.createElement(MovieCell, {\n    keyword: index,\n    movieObj: e,\n    getButtonName: getCellButtonName,\n    refreshParent: refreshList,\n    onClick: onClickMovieCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }\n  }))));\n}\n\nexport default MyContent;","map":{"version":3,"sources":["/Users/avinashmamidi/Downloads/Movie-Night-Extravaganza-master/app/src/screens/MyContent/index.js"],"names":["React","useState","fetchMyContentList","MovieCell","isMovieObjectExistInLocalStorage","removeMovieToMyContent","MyContent","apiData","updateNow","setUpdateNow","refreshList","onClickMovieCell","movieObj","getCellButtonName","map","e","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,qBAAP;AACA,SAASC,kBAAT,QAAmC,gCAAnC;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,SAASC,gCAAT,EAA2CC,sBAA3C,QAAyE,gCAAzE;;AAGA,SAASC,SAAT,GAAqB;AAEjB,QAAMC,OAAO,GAAGL,kBAAkB,EAAlC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAD,CAA1C;AAEA;;;;AAGA,QAAMS,WAAW,GAAG,MAAM;AACtBD,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACH,GAFD;AAIA;;;;;AAGA,QAAMG,gBAAgB,GAAIC,QAAD,IAAc;AACnC,QAAIR,gCAAgC,CAACQ,QAAD,CAAhC,KAA+C,IAAnD,EAAyD;AACrDP,MAAAA,sBAAsB,CAACO,QAAD,CAAtB;AACH;AACJ,GAJD;AAMA;;;;;AAGA,QAAMC,iBAAiB,GAAG,MAAM;AAC5B,WAAO,wBAAP;AACH,GAFD;;AAIA,sBACI,uDACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKN,OAAO,IAAIA,OAAO,CAACO,GAAR,CAAY,CAACC,CAAD,EAAIC,KAAJ,kBACpB,oBAAC,SAAD;AACI,IAAA,OAAO,EAAEA,KADb;AAEI,IAAA,QAAQ,EAAED,CAFd;AAGI,IAAA,aAAa,EAAEF,iBAHnB;AAII,IAAA,aAAa,EAAEH,WAJnB;AAKI,IAAA,OAAO,EAAEC,gBALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADQ,CADhB,CADJ,CADJ;AAaH;;AAED,eAAeL,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport '../Movies/style.css';\nimport { fetchMyContentList } from '../../utilites/myContentHelper'\nimport MovieCell from '../../components/MovieCell'\nimport { isMovieObjectExistInLocalStorage, removeMovieToMyContent } from '../../utilites/myContentHelper'\n\n\nfunction MyContent() {\n\n    const apiData = fetchMyContentList()\n    const [updateNow, setUpdateNow] = useState(true)\n\n    /**\n    * This method is to refresh the list of MyContent Page when Movie is removed.\n    */\n    const refreshList = () => {\n        setUpdateNow(!updateNow)\n    }\n\n    /**\n    * This callBack Fuction Handles the Add / Remove content ButtonAction\n    */\n    const onClickMovieCell = (movieObj) => {\n        if (isMovieObjectExistInLocalStorage(movieObj) === true) {\n            removeMovieToMyContent(movieObj)\n        }\n    }\n\n    /**\n     * This method generates the Button Name dynamically on basis of condition.\n     */\n    const getCellButtonName = () => {\n        return \"Remove From My Content\"\n    }\n\n    return (\n        <>\n            <div className='movieContainer'>\n                {apiData && apiData.map((e, index) =>\n                    <MovieCell\n                        keyword={index}\n                        movieObj={e}\n                        getButtonName={getCellButtonName}\n                        refreshParent={refreshList}\n                        onClick={onClickMovieCell} />)}\n            </div>\n        </>\n    );\n}\n\nexport default MyContent;"]},"metadata":{},"sourceType":"module"}