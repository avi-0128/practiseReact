{"ast":null,"code":"var _jsxFileName = \"/Users/avinashmamidi/Downloads/Movie-Night-Extravaganza-master/app/src/screens/Movies/index.js\";\nimport React, { useRef, useCallback } from 'react';\nimport './style.css';\nimport MovieCell from '../../components/MovieCell';\nimport { searchWithTitle } from '../../actions/search';\nimport store from '../../reducers/store';\nimport SubHeader from '../../components/SubHeader';\nimport { isMovieObjectExistInLocalStorage, addMovieToMyContent, removeMovieToMyContent, fetchMyContentKV } from '../../utilites/myContentHelper';\nimport { connect } from 'react-redux';\n\nfunction MoviesScreen(props) {\n  const {\n    apiData,\n    totalCountForSearchedData,\n    lastSearchText,\n    lastPage\n  } = props.data.search;\n  /**\n   * The observer and Callback handles the pagination where callback \n   * handles the IntersectionObserver if cell is scrolled to last \n   */\n\n  const observer = useRef();\n  const lastMovieReference = useCallback(node => {\n    if (observer.current) observer.current.disconnect();\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && lastPage !== null) {\n        store.dispatch(searchWithTitle(lastSearchText, lastPage));\n      }\n    });\n    if (node) observer.current.observe(node);\n  });\n  /**\n   * This callBack Fuction Handles the Add / Remove content ButtonAction\n   */\n\n  const onClickMovieCell = movieObj => {\n    if (isMovieObjectExistInLocalStorage(movieObj) === undefined || isMovieObjectExistInLocalStorage(movieObj) === false) {\n      addMovieToMyContent(movieObj);\n    } else if (isMovieObjectExistInLocalStorage(movieObj) === true) {\n      removeMovieToMyContent(movieObj);\n    }\n  };\n  /**\n   * This method generates the Button Name dynamically on basis of condition.\n   */\n\n\n  const getCellButtonName = movieObj => {\n    let keyVal = fetchMyContentKV();\n    let buttonName = \"Add To My Content\";\n\n    if (keyVal) {\n      buttonName = keyVal.hasOwnProperty(movieObj.imdbID) ? \"Remove From My Content\" : 'Add To My Content';\n    }\n\n    return buttonName;\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SubHeader, {\n    totalCountForSearchedData: totalCountForSearchedData,\n    lastSearchText: lastSearchText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movieContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, apiData.map((movie, index) => {\n    if (apiData.length === index + 1) {\n      return /*#__PURE__*/React.createElement(MovieCell, {\n        reference: lastMovieReference,\n        getButtonName: getCellButtonName,\n        keyword: index,\n        movieObj: movie,\n        onClick: onClickMovieCell,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(MovieCell, {\n      keyword: index,\n      movieObj: movie,\n      getButtonName: getCellButtonName,\n      onClick: onClickMovieCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 18\n      }\n    });\n  })));\n}\n\nconst mapStateToProps = state => {\n  return {\n    data: state\n  };\n};\n\nexport default connect(mapStateToProps)(MoviesScreen);","map":{"version":3,"sources":["/Users/avinashmamidi/Downloads/Movie-Night-Extravaganza-master/app/src/screens/Movies/index.js"],"names":["React","useRef","useCallback","MovieCell","searchWithTitle","store","SubHeader","isMovieObjectExistInLocalStorage","addMovieToMyContent","removeMovieToMyContent","fetchMyContentKV","connect","MoviesScreen","props","apiData","totalCountForSearchedData","lastSearchText","lastPage","data","search","observer","lastMovieReference","node","current","disconnect","IntersectionObserver","entries","isIntersecting","dispatch","observe","onClickMovieCell","movieObj","undefined","getCellButtonName","keyVal","buttonName","hasOwnProperty","imdbID","map","movie","index","length","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useRef, useCallback } from 'react';\nimport './style.css';\nimport MovieCell from '../../components/MovieCell'\nimport { searchWithTitle } from '../../actions/search'\nimport store from '../../reducers/store'\nimport SubHeader from '../../components/SubHeader'\nimport { isMovieObjectExistInLocalStorage, addMovieToMyContent, removeMovieToMyContent, fetchMyContentKV } from '../../utilites/myContentHelper'\nimport { connect } from 'react-redux'\n\n\nfunction MoviesScreen(props) {\n  const { apiData, totalCountForSearchedData, lastSearchText, lastPage } = props.data.search\n  /**\n   * The observer and Callback handles the pagination where callback \n   * handles the IntersectionObserver if cell is scrolled to last \n   */\n  const observer = useRef()\n  const lastMovieReference = useCallback(node => {\n    if (observer.current) observer.current.disconnect();\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && lastPage !== null) {\n        store.dispatch(searchWithTitle(lastSearchText, lastPage))\n      }\n    })\n    if (node) observer.current.observe(node)\n  })\n\n  /**\n   * This callBack Fuction Handles the Add / Remove content ButtonAction\n   */\n  const onClickMovieCell = (movieObj) => {\n    if (isMovieObjectExistInLocalStorage(movieObj) === undefined || isMovieObjectExistInLocalStorage(movieObj) === false) {\n      addMovieToMyContent(movieObj)\n    } else if (isMovieObjectExistInLocalStorage(movieObj) === true) {\n      removeMovieToMyContent(movieObj)\n    }\n  }\n\n  /**\n   * This method generates the Button Name dynamically on basis of condition.\n   */\n  const getCellButtonName = (movieObj) => {\n    let keyVal = fetchMyContentKV()\n    let buttonName = \"Add To My Content\"\n    if (keyVal) {\n      buttonName = keyVal.hasOwnProperty(movieObj.imdbID) ? \"Remove From My Content\" : 'Add To My Content'\n    }\n    return buttonName\n  }\n\n  return (\n    <>\n      <SubHeader totalCountForSearchedData={totalCountForSearchedData} lastSearchText={lastSearchText} />\n      <div className='movieContainer'>\n        {apiData.map((movie, index) => {\n          if (apiData.length === index + 1) {\n            return <MovieCell\n              reference={lastMovieReference}\n              getButtonName={getCellButtonName}\n              keyword={index}\n              movieObj={movie}\n              onClick={onClickMovieCell} />\n          }\n          return <MovieCell\n            keyword={index}\n            movieObj={movie}\n            getButtonName={getCellButtonName}\n            onClick={onClickMovieCell} />\n        })\n        }\n      </div>\n    </>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    data: state\n  }\n}\n\nexport default connect(mapStateToProps)(MoviesScreen);"]},"metadata":{},"sourceType":"module"}