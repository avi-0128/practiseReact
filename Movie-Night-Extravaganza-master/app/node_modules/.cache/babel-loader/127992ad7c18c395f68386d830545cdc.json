{"ast":null,"code":"import LocalStorageConst from '../constants/localStorage';\n/**\n * @export fetchMyContentList Method\n * @return {Array} Returns Parsed List of Movie Object.\n */\n\nexport function fetchMyContentList() {\n  if (localStorage.getItem(LocalStorageConst.MY_CONTENT_LIST)) {\n    return JSON.parse(localStorage.getItem(LocalStorageConst.MY_CONTENT_LIST));\n  }\n}\n/**\n * @export fetchMyContentKV Method\n * @return {Object} Returns Key value (object) of IMdb ids\n */\n\nexport function fetchMyContentKV() {\n  if (localStorage.getItem(LocalStorageConst.MY_CONTENT_IMDB_IDS)) {\n    return JSON.parse(localStorage.getItem(LocalStorageConst.MY_CONTENT_IMDB_IDS));\n  }\n}\n/**\n * @export isMovieObjectExistInLocalStorage Method\n * @return { Object } It can return true | false | undefined\n * True - when the movie Object exist in Local Storage List\n * False - when the movie Object doesnot Exist in the existing List\n * undefined - when the movie List is not defined and not yet initialised \n */\n\nexport function isMovieObjectExistInLocalStorage(movie) {\n  if (localStorage.getItem(LocalStorageConst.MY_CONTENT_LIST) && localStorage.getItem(LocalStorageConst.MY_CONTENT_IMDB_IDS)) {\n    const movieList = localStorage.getItem(LocalStorageConst.MY_CONTENT_LIST);\n    const keyValMovie = localStorage.getItem(LocalStorageConst.MY_CONTENT_IMDB_IDS);\n    let parsed_ML = JSON.parse(movieList);\n    let parsed_KV_ML = JSON.parse(keyValMovie);\n    parsed_ML = parsed_ML.filter(e => {\n      return e.imdbID === movie.imdbID;\n    });\n\n    if (parsed_ML.length > 0 && parsed_KV_ML.hasOwnProperty(movie.imdbID)) {\n      return true;\n    }\n\n    return false;\n  }\n}\n/**\n * To add/initialise Movie in the Local Storage \n * @export\n * @param {*} movie\n */\n\nexport function addMovieToMyContent(movie) {\n  let parsed_ML;\n  let parsed_KV_ML;\n\n  if (localStorage.getItem(LocalStorageConst.MY_CONTENT_LIST) && localStorage.getItem(LocalStorageConst.MY_CONTENT_IMDB_IDS)) {\n    const movieList = localStorage.getItem(LocalStorageConst.MY_CONTENT_LIST);\n    const keyValMovie = localStorage.getItem(LocalStorageConst.MY_CONTENT_IMDB_IDS);\n    parsed_ML = JSON.parse(movieList);\n    parsed_KV_ML = JSON.parse(keyValMovie);\n    parsed_ML.push(movie);\n    parsed_KV_ML[movie.imdbID] = true;\n    parsed_ML = JSON.stringify(parsed_ML);\n    parsed_KV_ML = JSON.stringify(parsed_KV_ML);\n  } else {\n    parsed_ML = [movie];\n    parsed_KV_ML = {};\n    parsed_KV_ML[movie.imdbID] = true;\n    parsed_ML = JSON.stringify(parsed_ML);\n    parsed_KV_ML = JSON.stringify(parsed_KV_ML);\n  }\n\n  localStorage.setItem(LocalStorageConst.MY_CONTENT_LIST, parsed_ML);\n  localStorage.setItem(LocalStorageConst.MY_CONTENT_IMDB_IDS, parsed_KV_ML);\n}\n/**\n * To remove Movie in the Local Storage \n * @export\n * @param {*} movie\n */\n\nexport function removeMovieToMyContent(movie) {\n  let parsed_ML;\n  let parsed_KV_ML;\n\n  if (localStorage.getItem(LocalStorageConst.MY_CONTENT_LIST) && localStorage.getItem(LocalStorageConst.MY_CONTENT_IMDB_IDS)) {\n    const movieList = localStorage.getItem(LocalStorageConst.MY_CONTENT_LIST);\n    const keyValMovie = localStorage.getItem(LocalStorageConst.MY_CONTENT_IMDB_IDS);\n    parsed_ML = JSON.parse(movieList);\n    parsed_KV_ML = JSON.parse(keyValMovie);\n    parsed_ML = parsed_ML.filter(e => {\n      return e.imdbID !== movie.imdbID;\n    });\n    delete parsed_KV_ML[movie.imdbID];\n    parsed_ML = JSON.stringify(parsed_ML);\n    parsed_KV_ML = JSON.stringify(parsed_KV_ML);\n  }\n\n  localStorage.setItem(LocalStorageConst.MY_CONTENT_LIST, parsed_ML);\n  localStorage.setItem(LocalStorageConst.MY_CONTENT_IMDB_IDS, parsed_KV_ML);\n}","map":{"version":3,"sources":["/Users/avinashmamidi/Desktop/Movie-Night-Extravaganza-master/app/src/utilites/myContentHelper.js"],"names":["LocalStorageConst","fetchMyContentList","localStorage","getItem","MY_CONTENT_LIST","JSON","parse","fetchMyContentKV","MY_CONTENT_IMDB_IDS","isMovieObjectExistInLocalStorage","movie","movieList","keyValMovie","parsed_ML","parsed_KV_ML","filter","e","imdbID","length","hasOwnProperty","addMovieToMyContent","push","stringify","setItem","removeMovieToMyContent"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,2BAA9B;AACA;;;;;AAIA,OAAO,SAASC,kBAAT,GAA8B;AACjC,MAAIC,YAAY,CAACC,OAAb,CAAqBH,iBAAiB,CAACI,eAAvC,CAAJ,EAA6D;AACzD,WAAOC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqBH,iBAAiB,CAACI,eAAvC,CAAX,CAAP;AACH;AACJ;AAED;;;;;AAIA,OAAO,SAASG,gBAAT,GAA4B;AAC/B,MAAIL,YAAY,CAACC,OAAb,CAAqBH,iBAAiB,CAACQ,mBAAvC,CAAJ,EAAiE;AAC7D,WAAOH,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqBH,iBAAiB,CAACQ,mBAAvC,CAAX,CAAP;AACH;AACJ;AAED;;;;;;;;AAOA,OAAO,SAASC,gCAAT,CAA0CC,KAA1C,EAAiD;AACpD,MAAIR,YAAY,CAACC,OAAb,CAAqBH,iBAAiB,CAACI,eAAvC,KAA2DF,YAAY,CAACC,OAAb,CAAqBH,iBAAiB,CAACQ,mBAAvC,CAA/D,EAA4H;AACxH,UAAMG,SAAS,GAAGT,YAAY,CAACC,OAAb,CAAqBH,iBAAiB,CAACI,eAAvC,CAAlB;AACA,UAAMQ,WAAW,GAAGV,YAAY,CAACC,OAAb,CAAqBH,iBAAiB,CAACQ,mBAAvC,CAApB;AACA,QAAIK,SAAS,GAAGR,IAAI,CAACC,KAAL,CAAWK,SAAX,CAAhB;AACA,QAAIG,YAAY,GAAGT,IAAI,CAACC,KAAL,CAAWM,WAAX,CAAnB;AACAC,IAAAA,SAAS,GAAGA,SAAS,CAACE,MAAV,CAAkBC,CAAD,IAAK;AAC9B,aAAQA,CAAC,CAACC,MAAF,KAAaP,KAAK,CAACO,MAA3B;AACH,KAFW,CAAZ;;AAGA,QAAGJ,SAAS,CAACK,MAAV,GAAmB,CAAnB,IAAwBJ,YAAY,CAACK,cAAb,CAA4BT,KAAK,CAACO,MAAlC,CAA3B,EAAqE;AACjE,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;AACJ;AAED;;;;;;AAKA,OAAO,SAASG,mBAAT,CAA6BV,KAA7B,EAAoC;AACvC,MAAIG,SAAJ;AACA,MAAIC,YAAJ;;AACA,MAAIZ,YAAY,CAACC,OAAb,CAAqBH,iBAAiB,CAACI,eAAvC,KAA2DF,YAAY,CAACC,OAAb,CAAqBH,iBAAiB,CAACQ,mBAAvC,CAA/D,EAA4H;AACxH,UAAMG,SAAS,GAAGT,YAAY,CAACC,OAAb,CAAqBH,iBAAiB,CAACI,eAAvC,CAAlB;AACA,UAAMQ,WAAW,GAAGV,YAAY,CAACC,OAAb,CAAqBH,iBAAiB,CAACQ,mBAAvC,CAApB;AACAK,IAAAA,SAAS,GAAGR,IAAI,CAACC,KAAL,CAAWK,SAAX,CAAZ;AACAG,IAAAA,YAAY,GAAGT,IAAI,CAACC,KAAL,CAAWM,WAAX,CAAf;AAEAC,IAAAA,SAAS,CAACQ,IAAV,CAAeX,KAAf;AACAI,IAAAA,YAAY,CAACJ,KAAK,CAACO,MAAP,CAAZ,GAA6B,IAA7B;AAEAJ,IAAAA,SAAS,GAAGR,IAAI,CAACiB,SAAL,CAAeT,SAAf,CAAZ;AACAC,IAAAA,YAAY,GAAGT,IAAI,CAACiB,SAAL,CAAeR,YAAf,CAAf;AACH,GAXD,MAWO;AACHD,IAAAA,SAAS,GAAG,CAACH,KAAD,CAAZ;AACAI,IAAAA,YAAY,GAAG,EAAf;AACAA,IAAAA,YAAY,CAACJ,KAAK,CAACO,MAAP,CAAZ,GAA6B,IAA7B;AAEAJ,IAAAA,SAAS,GAAGR,IAAI,CAACiB,SAAL,CAAeT,SAAf,CAAZ;AACAC,IAAAA,YAAY,GAAGT,IAAI,CAACiB,SAAL,CAAeR,YAAf,CAAf;AACH;;AACDZ,EAAAA,YAAY,CAACqB,OAAb,CAAqBvB,iBAAiB,CAACI,eAAvC,EAAuDS,SAAvD;AACAX,EAAAA,YAAY,CAACqB,OAAb,CAAqBvB,iBAAiB,CAACQ,mBAAvC,EAA2DM,YAA3D;AACH;AAED;;;;;;AAKA,OAAO,SAASU,sBAAT,CAAgCd,KAAhC,EAAuC;AAC1C,MAAIG,SAAJ;AACA,MAAIC,YAAJ;;AACA,MAAIZ,YAAY,CAACC,OAAb,CAAqBH,iBAAiB,CAACI,eAAvC,KAA2DF,YAAY,CAACC,OAAb,CAAqBH,iBAAiB,CAACQ,mBAAvC,CAA/D,EAA4H;AACxH,UAAMG,SAAS,GAAGT,YAAY,CAACC,OAAb,CAAqBH,iBAAiB,CAACI,eAAvC,CAAlB;AACA,UAAMQ,WAAW,GAAGV,YAAY,CAACC,OAAb,CAAqBH,iBAAiB,CAACQ,mBAAvC,CAApB;AACAK,IAAAA,SAAS,GAAGR,IAAI,CAACC,KAAL,CAAWK,SAAX,CAAZ;AACAG,IAAAA,YAAY,GAAGT,IAAI,CAACC,KAAL,CAAWM,WAAX,CAAf;AAEAC,IAAAA,SAAS,GAAIA,SAAS,CAACE,MAAV,CAAkBC,CAAD,IAAK;AAC/B,aAAQA,CAAC,CAACC,MAAF,KAAaP,KAAK,CAACO,MAA3B;AACH,KAFY,CAAb;AAGA,WAAOH,YAAY,CAACJ,KAAK,CAACO,MAAP,CAAnB;AAEAJ,IAAAA,SAAS,GAAGR,IAAI,CAACiB,SAAL,CAAeT,SAAf,CAAZ;AACAC,IAAAA,YAAY,GAAGT,IAAI,CAACiB,SAAL,CAAeR,YAAf,CAAf;AACH;;AACDZ,EAAAA,YAAY,CAACqB,OAAb,CAAqBvB,iBAAiB,CAACI,eAAvC,EAAuDS,SAAvD;AACAX,EAAAA,YAAY,CAACqB,OAAb,CAAqBvB,iBAAiB,CAACQ,mBAAvC,EAA2DM,YAA3D;AACH","sourcesContent":["import LocalStorageConst from '../constants/localStorage'\n/**\n * @export fetchMyContentList Method\n * @return {Array} Returns Parsed List of Movie Object.\n */\nexport function fetchMyContentList() {\n    if (localStorage.getItem(LocalStorageConst.MY_CONTENT_LIST)) {\n        return JSON.parse(localStorage.getItem(LocalStorageConst.MY_CONTENT_LIST))\n    }\n}\n\n/**\n * @export fetchMyContentKV Method\n * @return {Object} Returns Key value (object) of IMdb ids\n */\nexport function fetchMyContentKV() {\n    if (localStorage.getItem(LocalStorageConst.MY_CONTENT_IMDB_IDS)) {\n        return JSON.parse(localStorage.getItem(LocalStorageConst.MY_CONTENT_IMDB_IDS))\n    }\n}\n\n/**\n * @export isMovieObjectExistInLocalStorage Method\n * @return { Object } It can return true | false | undefined\n * True - when the movie Object exist in Local Storage List\n * False - when the movie Object doesnot Exist in the existing List\n * undefined - when the movie List is not defined and not yet initialised \n */\nexport function isMovieObjectExistInLocalStorage(movie) {\n    if (localStorage.getItem(LocalStorageConst.MY_CONTENT_LIST) && localStorage.getItem(LocalStorageConst.MY_CONTENT_IMDB_IDS)) {\n        const movieList = localStorage.getItem(LocalStorageConst.MY_CONTENT_LIST)\n        const keyValMovie = localStorage.getItem(LocalStorageConst.MY_CONTENT_IMDB_IDS)\n        let parsed_ML = JSON.parse(movieList)\n        let parsed_KV_ML = JSON.parse(keyValMovie)\n        parsed_ML = parsed_ML.filter((e)=>{\n            return  e.imdbID === movie.imdbID\n        })\n        if(parsed_ML.length > 0 && parsed_KV_ML.hasOwnProperty(movie.imdbID)){\n            return true\n        }\n        return false\n    }\n}\n\n/**\n * To add/initialise Movie in the Local Storage \n * @export\n * @param {*} movie\n */\nexport function addMovieToMyContent(movie) {\n    let parsed_ML;\n    let parsed_KV_ML;\n    if (localStorage.getItem(LocalStorageConst.MY_CONTENT_LIST) && localStorage.getItem(LocalStorageConst.MY_CONTENT_IMDB_IDS)) {\n        const movieList = localStorage.getItem(LocalStorageConst.MY_CONTENT_LIST)\n        const keyValMovie = localStorage.getItem(LocalStorageConst.MY_CONTENT_IMDB_IDS)\n        parsed_ML = JSON.parse(movieList)\n        parsed_KV_ML = JSON.parse(keyValMovie)\n        \n        parsed_ML.push(movie)\n        parsed_KV_ML[movie.imdbID] = true\n        \n        parsed_ML = JSON.stringify(parsed_ML)\n        parsed_KV_ML = JSON.stringify(parsed_KV_ML)\n    } else {\n        parsed_ML = [movie]\n        parsed_KV_ML = {}\n        parsed_KV_ML[movie.imdbID] = true\n\n        parsed_ML = JSON.stringify(parsed_ML)\n        parsed_KV_ML = JSON.stringify(parsed_KV_ML)\n    }\n    localStorage.setItem(LocalStorageConst.MY_CONTENT_LIST,parsed_ML)\n    localStorage.setItem(LocalStorageConst.MY_CONTENT_IMDB_IDS,parsed_KV_ML)\n}\n\n/**\n * To remove Movie in the Local Storage \n * @export\n * @param {*} movie\n */\nexport function removeMovieToMyContent(movie) {\n    let parsed_ML;\n    let parsed_KV_ML;\n    if (localStorage.getItem(LocalStorageConst.MY_CONTENT_LIST) && localStorage.getItem(LocalStorageConst.MY_CONTENT_IMDB_IDS)) {\n        const movieList = localStorage.getItem(LocalStorageConst.MY_CONTENT_LIST)\n        const keyValMovie = localStorage.getItem(LocalStorageConst.MY_CONTENT_IMDB_IDS)\n        parsed_ML = JSON.parse(movieList)\n        parsed_KV_ML = JSON.parse(keyValMovie)\n        \n        parsed_ML =  parsed_ML.filter((e)=>{\n            return  e.imdbID !== movie.imdbID\n        })\n        delete parsed_KV_ML[movie.imdbID]\n        \n        parsed_ML = JSON.stringify(parsed_ML)\n        parsed_KV_ML = JSON.stringify(parsed_KV_ML)\n    }\n    localStorage.setItem(LocalStorageConst.MY_CONTENT_LIST,parsed_ML)\n    localStorage.setItem(LocalStorageConst.MY_CONTENT_IMDB_IDS,parsed_KV_ML)\n}"]},"metadata":{},"sourceType":"module"}